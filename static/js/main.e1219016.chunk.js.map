{"version":3,"sources":["components/redux/contact/contact-action.js","components/redux/contact/contact-selector.js","components/Contact/ContactsList.js","components/Form/ContactForm.js","components/Filter/Filter.js","App.js","components/redux/contact/contact-reducer.js","components/redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uniqueId","deleteContact","changeFilter","getContact","state","contacts","contact","getFilter","filter","getVisibleContact","normalizedFilter","toLowerCase","text","includes","getFiteredContact","ContactsList","useSelector","dispatch","useDispatch","length","map","className","onClick","onDeleteContact","ContactForm","useState","setName","setNumber","handleChange","target","value","reset","onSubmit","event","preventDefault","find","alert","type","placeholder","onChange","disabled","Filter","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","rootReducer","contactReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e1219016.chunk.js","sourcesContent":["// import { ADD, DELETE, CHANGE_FILTER } from './contact-types';\r\nimport { v4 as uniqueId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nexport const addContact = createAction(\r\n  'contact/addContact',\r\n  function prepare(name, number) {\r\n    return {\r\n      payload: {\r\n        id: uniqueId(),\r\n        name,\r\n        number,\r\n      },\r\n    };\r\n  },\r\n);\r\nexport const deleteContact = createAction('contact/deleteContact');\r\nexport const changeFilter = createAction('contact/changeFilter');\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: uniqueId(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n// export const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","export const getContact = state => state.contacts.contact;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContact = state => {\r\n  const contacts = getContact(state);\r\n  const filter = getFilter(state);\r\n\r\n  const getFiteredContact = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(text =>\r\n      text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return getFiteredContact(contacts);\r\n};\r\n","import PropTypes from 'prop-types';\r\n// import { connect} from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteContact } from '../redux/contact/contact-action';\r\nimport './ContactsList.css';\r\nimport { getVisibleContact } from '../redux/contact/contact-selector';\r\n\r\nfunction ContactsList() {\r\n  const contacts = useSelector(getVisibleContact);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {!contacts.length && <div>Немає жодного контакту</div>}\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id} className=\"item__contact\">\r\n            <p className=\"item__text\">{name}</p>\r\n            <p className=\"item__text\">{number}</p>\r\n            <button\r\n              className=\"item__buttom\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              стерти\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\nexport default ContactsList;\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter, contact } = state.contacts;\r\n//   const normalize = filter.toLowerCase().trim();\r\n//   const visibleContacts = contact.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalize),\r\n//   );\r\n\r\n//   return { contacts: visibleContacts };\r\n// };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import { useState } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContact } from '../redux/contact/contact-selector';\r\nimport { addContact } from '../redux/contact/contact-action';\r\nimport './ContactForm.css';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContact);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    const auditContact = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (auditContact) {\r\n      alert(`Контакт ${name} з таким ім’ям вже є.`);\r\n      reset();\r\n      return;\r\n    }\r\n    dispatch(addContact(name, number));\r\n    // onSubmit(name, number);\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  return (\r\n    <form className=\"item__form\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Ім’я\r\n        <input\r\n          className=\"item__input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Jony Dep\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Телефон\r\n        <input\r\n          className=\"item__input\"\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"111-11-11\"\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" disabled={name === '' || number === ''}>\r\n        Зберегти контакт\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nexport default ContactForm;\r\n// const mapStateToProps = ({ contacts: { contact } }) => ({\r\n//   contact,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapDispatchToProps)(ContactForm);\r\n","// import { connect }  from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeFilter } from '../redux/contact/contact-action';\r\nimport './Filter.css';\r\nimport { getFilter } from '../redux/contact/contact-selector';\r\nfunction Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className=\"item__filter\">\r\n      <p className=\"item__text-filter\">Пошук контактів</p>\r\n      <input\r\n        className=\"item__element\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event => dispatch(changeFilter(event.target.value))}\r\n        // onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\nexport default Filter;\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(changeFilter(event.target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactsList from './components/Contact/';\nimport ContactForm from './components/Form/';\nimport Filter from './components/Filter/';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"Containet\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n// import { ADD, DELETE, CHANGE_FILTER } from './contact-types';\r\nimport { addContact, deleteContact, changeFilter } from './contact-action';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nconst contacTest = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\nconst contact = createReducer(contacTest, {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n// const contact = (state = contacTest, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return [...state, payload];\r\n//     case DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nexport default combineReducers({\r\n  contact,\r\n  filter,\r\n});\r\n","// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactReducer from './contact/contact-reducer';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst rootReducer = combineReducers({ contacts: contactReducer });\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\nexport const persistor = persistStore(store);\r\n\r\n// const rootReducer = combineReducers({ contacts: contactReducer });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './components/redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}